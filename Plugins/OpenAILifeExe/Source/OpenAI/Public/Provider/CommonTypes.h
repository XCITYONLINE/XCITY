// OpenAI, Copyright LifeEXE. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "ToolsTypes.h"
#include "CommonTypes.generated.h"

UENUM(BlueprintType)
enum class EMessageContentType : uint8
{
    Text,
    Image_URL
};

USTRUCT(BlueprintType)
struct FImageURL
{
    GENERATED_BODY()
    /**
      Either a URL of the image or the base64 encoded image data.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString URL;

    /**
      Specifies the detail level of the image.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Detail{"auto"};
};

USTRUCT(BlueprintType)
struct FMessageContent
{
    GENERATED_BODY()

    /**
      The text content.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Text;

    /**
      The image content.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FImageURL Image_URL;

    /**
      The type of the content part.
    */
    UPROPERTY(BlueprintReadWrite, Category = "OpenAI | Required")
    FString Type{"text"};
};

USTRUCT(BlueprintType)
struct FMessage
{
    GENERATED_BODY()

    /**
      The role of the messages author. One of system, user, assistant, or tool.
    */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "OpenAI | Required")
    FString Role;

    /**
      The contents of the message.
      content is required for all messages, and may be null for assistant messages with function calls.
    */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "OpenAI | Required")
    FString Content;

    /**
      An array of content parts with a defined type,
      each can be of type text or image_url when passing in images.
      You can pass multiple images by adding multiple image_url content parts.
      Image input is only supported when using the gpt-4-visual-preview model.
    */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "OpenAI | Required")
    TArray<FMessageContent> ContentArray;

    /**
      The tool calls generated by the model, such as function calls.
    */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "OpenAI")
    TArray<FToolCalls> Tool_Calls;

    /**
      Tool call that this message is responding to.
    */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "OpenAI | Required")
    FString Tool_Call_ID;

    /**
      An optional name for the participant.
      Provides the model information to differentiate between participants of the same role.
    */
    UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "OpenAI | Optional")
    FString Name;
};

USTRUCT(BlueprintType)
struct FOpenAIAuth
{
    GENERATED_BODY()

    UPROPERTY(BlueprintReadWrite, Category = "OpenAI")
    FString APIKey{};

    UPROPERTY(BlueprintReadWrite, Category = "OpenAI")
    FString OrganizationID{};

    bool IsEmpty() const { return APIKey.IsEmpty() || OrganizationID.IsEmpty(); }
};

namespace OpenAI
{
using ServiceSecrets = TArray<TTuple<FString, FString>>;
using QueryPairs = TArray<TTuple<FString, FString>>;

}  // namespace OpenAI
